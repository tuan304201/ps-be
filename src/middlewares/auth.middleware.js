import jwt from "jsonwebtoken";
import redisClient from "../config/redis.js";
import { generateAccessToken } from "../utils/helper.js";

// üõ°Ô∏è Middleware x√°c th·ª±c Access Token
export const authenticate = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ message: "Kh√¥ng c√≥ Access Token!" });
    }

    const accessToken = authHeader.split(" ")[1];

    try {
      const decoded = jwt.verify(accessToken, process.env.JWT_SECRET);
      req.user = decoded;
      return next();
    } catch (error) {
      if (error.name === "TokenExpiredError") {
        return refreshAccessToken(req, res, next);
      }
      return res.status(403).json({ message: "Access Token kh√¥ng h·ª£p l·ªá!" });
    }
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server!", error });
  }
};

// üîÑ Middleware t·ª± ƒë·ªông l√†m m·ªõi Access Token khi h·∫øt h·∫°n
const refreshAccessToken = async (req, res, next) => {
  try {
    const refreshToken = req.cookies.refreshToken;
    if (!refreshToken) {
      return res.status(401).json({ message: "Kh√¥ng c√≥ Refresh Token!" });
    }

    const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);
    const userId = decoded.userId;

    // Ki·ªÉm tra Refresh Token c√≥ h·ª£p l·ªá trong Redis kh√¥ng
    const storedToken = await redisClient.get(`refreshToken:${userId}`);
    if (!storedToken || storedToken !== refreshToken) {
      return res.status(403).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!" });
    }

    // T·∫°o Access Token m·ªõi
    const newAccessToken = generateAccessToken(userId);

    // G·ª≠i Access Token m·ªõi cho client
    res.setHeader("Authorization", `Bearer ${newAccessToken}`);
    req.user = { userId }; // C·∫≠p nh·∫≠t req.user
    return next();
  } catch (error) {
    return res.status(403).json({ message: "Refresh Token h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!" });
  }
};

// üîë Middleware ki·ªÉm tra quy·ªÅn Admin
export const checkManagerOrSuperAdmin = (req, res, next) => {
  if (req.user.role !== "superadmin" && req.user.role !== "manager") {
    return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" });
  }
  next();
};

export const isAdmin = (req, res, next) => {
  if (req.user.role !== "admin" && req.user.role !== "superadmin") {
    return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn Admin" });
  }
  next();
};

export const isEditor = (req, res, next) => {
  if (!["admin", "superadmin", "editor"].includes(req.user.role)) {
    return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn Editor" });
  }
  next();
};
