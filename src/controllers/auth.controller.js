import User from "../models/User.js";
import bcrypt from "bcryptjs";
import dotenv from "dotenv";
import jwt from "jsonwebtoken";
import redisClient from "../config/redis.js";
import { generateOtp, generateAccessToken, generateRefreshToken } from "../utils/helper.js";
import { getIO } from "../config/websocket.js";
import { isValidEmail } from "../utils/validator.js";
import { sendEmailOTP } from "../utils/mailer.js";

dotenv.config();

export const register = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!isValidEmail(email)) {
      return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ email, password: hashedPassword, status: "inactive" });
    await newUser.save();

    const otp = generateOtp();

    const existingOtp = await redisClient.get(`otpActive:${email}`);
    if (existingOtp) {
      return res.status(400).json({ message: "OTP hi·ªán t·∫°i v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng ki·ªÉm tra email." });
    }

    await redisClient.set(`otpActive:${email}`, otp, "EX", 60);
    await sendEmailOTP(email, otp);

    return res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra OTP." });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// üìå G·ª≠i l·∫°i OTP n·∫øu h·∫øt h·∫°n
export const resendOtp = async (req, res) => {
  try {
    const { email } = req.body;

    if (!isValidEmail(email)) {
      return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
    }

    const otp = generateOtp();

    const existingOtp = await redisClient.get(`otpActive:${email}`);
    if (existingOtp) {
      return res.status(400).json({ message: "OTP hi·ªán t·∫°i v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng ki·ªÉm tra email." });
    }

    await redisClient.set(`otpActive:${email}`, otp, "EX", 60);
    await sendEmailOTP(email, otp);

    return res.json({ message: "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i. Vui l√≤ng ki·ªÉm tra email!" });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// üìå X√°c nh·∫≠n OTP
export const verifyOtp = async (req, res) => {
  try {
    const { email, otp } = req.body;

    const storedOtp = await redisClient.get(`otpActive:${email}`);

    if (!storedOtp || storedOtp !== otp) return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });

    await User.findOneAndUpdate({ email }, { status: "active" });

    await redisClient.del(`otpActive:${email}`);

    return res.json({ message: "X√°c nh·∫≠n th√†nh c√¥ng!" });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// ƒêƒÉng nh·∫≠p
export const login = async (req, res) => {
  try {
    const { email, password, rememberMe } = req.body;

    if (!isValidEmail(email)) {
      return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
    }

    const existingUser = await User.findOne({ email });
    if (!existingUser) return res.status(400).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });

    if (existingUser.status === "inactive") {
      return res.status(403).json({
        message: "T√†i kho·∫£n ch∆∞a k√≠ch ho·∫°t.",
      });
    }

    if (existingUser.status == "locked") return res.status(403).json({ message: "T√†i kho·∫£n ƒë√£ b·ªã kho√°" });

    const isMatch = await bcrypt.compare(password, existingUser.password);
    if (!isMatch) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });

    const accessToken = generateAccessToken(existingUser._id);
    const refreshToken = generateRefreshToken(existingUser._id);

    if (rememberMe) {
      await redisClient.set(`refreshToken:${existingUser._id}`, refreshToken, "EX", 30 * 24 * 60 * 60);
      res.cookie("refreshToken", refreshToken, {
        httpOnly: true,
        secure: true,
        sameSite: "strict",
        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 ng√†y
      });
    }

    res.status(200).json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", accessToken });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// ƒêƒÉng xu·∫•t
export const logout = async (req, res) => {
  try {
    const refreshToken = req.cookies.refreshToken;
    if (!refreshToken) return res.status(400).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!" });

    // X√≥a Refresh Token trong Redis
    const userId = await jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET).userId;

    await redisClient.del(`refreshToken:${userId}`);

    // X√≥a cookie Refresh Token
    res.clearCookie("refreshToken");

    res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error });
  }
};

// Y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u v√† x√°c nh·∫≠n
export const requestChangePassword = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { oldPassword, newPassword } = req.body;

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c" });

    if (newPassword.length < 6) return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });

    const existingOtp = await redisClient.get(`otp:changePassword:${user.email}`);

    if (existingOtp) {
      return res.status(400).json({ message: "OTP hi·ªán t·∫°i v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng ki·ªÉm tra email." });
    }

    const otp = generateOtp();
    await redisClient.set(`otp:changePassword:${user.email}`, otp, "EX", 60);
    await sendEmailOTP(user.email, otp);

    return res.json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const resendChangePasswordOtp = async (req, res) => {
  try {
    const userId = req.user.userId;
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const existingOtp = await redisClient.get(`otp:changePassword:${user.email}`);
    if (existingOtp) {
      return res.status(400).json({ message: "OTP hi·ªán t·∫°i v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng ki·ªÉm tra email." });
    }

    const otp = generateOtp();
    await redisClient.set(`otp:changePassword:${user.email}`, otp, "EX", 60);

    await sendEmailOTP(user.email, otp);

    res.json({ message: "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i. Vui l√≤ng ki·ªÉm tra email!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const confirmChangePassword = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { otp, newPassword } = req.body;

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const storedOtp = await redisClient.get(`otp:changePassword:${user.email}`);
    if (!storedOtp) return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });

    if (storedOtp !== otp) return res.status(400).json({ message: "OTP kh√¥ng ch√≠nh x√°c" });

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();

    await redisClient.del(`otp:changePassword:${user.email}`);

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const requestForgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n!" });

    const existingOtp = await redisClient.get(`forgotPasswordOtp:${email}`);

    if (existingOtp) {
      return res.status(400).json({ message: "OTP hi·ªán t·∫°i v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng ki·ªÉm tra email." });
    }

    const otp = generateOtp();
    await redisClient.set(`forgotPasswordOtp:${email}`, otp, "EX", 60);
    await sendEmailOTP(user.email, otp);

    return res.json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const confirmForgotPassword = async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n!" });

    const storedOtp = await redisClient.get(`forgotPasswordOtp:${user.email}`);
    if (!storedOtp) return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });

    if (storedOtp !== otp) return res.status(400).json({ message: "OTP kh√¥ng ch√≠nh x√°c" });

    if (newPassword.length < 6) return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();

    await redisClient.del(`forgotPasswordOtp:${user.email}`);

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const resendForgotPasswordOtp = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n!" });

    const existingOtp = await redisClient.get(`forgotPasswordOtp:${email}`);

    if (!existingOtp) {
      return res.status(400).json({ message: "OTP hi·ªán t·∫°i v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng ki·ªÉm tra email." });
    }

    const otp = generateOtp();
    await redisClient.set(`forgotPasswordOtp:${email}`, otp, "EX", 60);
    await sendEmailOTP(user.email, otp);

    return res.json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// Kh√≥a t√†i kho·∫£n (Admin)
export const lockUserAccount = async (req, res) => {
  try {
    const { userId } = req.body;
    const user = await User.findByIdAndUpdate(userId, { status: "locked" });

    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    getIO().to(userId).emit("accountLocked", { message: "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a!" });

    return res.json({ message: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a!" });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
